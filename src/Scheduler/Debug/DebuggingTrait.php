<?php

declare(strict_types=1);

namespace j45l\concurrentPhp\Scheduler\Debug;

use j45l\concurrentPhp\Scheduler\MainScheduler;
use j45l\concurrentPhp\Scheduler\Task;
use Throwable;

/** @mixin DebuggingMainScheduler|DebuggingSubordinatedScheduler */
trait DebuggingTrait
{
    /** @throws Throwable */
    protected function nextLoop(mixed $startTime): float
    {
        $this->debuggingChannel->put(sprintf(
            '%s🕒💤 %s Sleeping [N: %s S: %s, T: %s] Next @ %s',
            $this->indentation(),
            $this->reference(),
            count($this->notStartedTasks()),
            count($this->suspendedTasks()),
            count($this->terminatedTasks()),
            $this->ticker->time(),
        ));

        /** @noinspection PhpMultipleClassDeclarationsInspection */
        return parent::nextLoop($startTime);
    }

    /** @throws Throwable */
    protected function resumeTask(Task $task): mixed
    {
        $this->debuggingChannel->put(sprintf(
            '%s🕒⏰ %s Resuming coroutine %s (%s - %s)',
            $this->indentation(),
            $this->reference(),
            $task->coroutine->id,
            sprintf('%s:%s', $task->pool, $task->coroutine->name),
            $task->coroutine::class
        ));

        /** @noinspection PhpMultipleClassDeclarationsInspection */
        return parent::resumeTask($task);
    }

    protected function startLoop(float $startTime): float
    {
        $this->debuggingChannel->put(sprintf(
            '%s%s🕒🏳 %s Starting loop - [N: %s S: %s, T: %s] @ %s',
            $this::class === MainScheduler::class ? PHP_EOL : '',
            $this->indentation(),
            $this->reference(),
            count($this->notStartedTasks()),
            count($this->suspendedTasks()),
            count($this->terminatedTasks()),
            $this->ticker->time()
        ));

        /** @noinspection PhpMultipleClassDeclarationsInspection */
        return parent::startLoop($startTime); // TODO: Change the autogenerated stub
    }

    protected function endLoop(): void
    {
        $this->debuggingChannel->put(sprintf(
            '%s🕒️🏁 %s End loop - [N: %s S: %s, T: %s] @ %s - Load: %.0f%%%s',
            $this->indentation(),
            $this->reference(),
            count($this->notStartedTasks()),
            count($this->suspendedTasks()),
            count($this->terminatedTasks()),
            $this->ticker->time(),
            $this->loadAverage() * 100,
            $this::class === DebuggingMainScheduler::class ? PHP_EOL : '',
        ));

        /** @noinspection PhpMultipleClassDeclarationsInspection */
        parent::endLoop();
    }

    private function indentation(): string
    {
        return $this::class === DebuggingMainScheduler::class ? '' : '  ';
    }
}
